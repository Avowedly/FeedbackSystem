import telebot
from telebot import types
import json
import sqlite3
import re
import datetime

with open("token.txt", 'r') as file:
	token = file.readline()

with open("form.json", 'r', encoding="UTF-8") as file:
	form_data = json.load(file)

with open("disciplines.json", 'r', encoding="UTF-8") as file:
	disciplines_data = json.load(file)

bot = telebot.TeleBot(token)
#bot.delete_webhook()


# ___________________________________–ë–ê–ó–ê –î–ê–ù–ù–´–•_________________________________________
def create_database(name):
	"""
	–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
	–ü–æ–ª—è: id, –≥—Ä—É–ø–ø–∞
	"""
	conn = sqlite3.connect(f'{name}.sql')
	cursor = conn.cursor()
	cursor.execute('CREATE TABLE IF NOT EXISTS users (id int primary key, group_name varchar(10))')
	cursor.execute('CREATE TABLE IF NOT EXISTS forms (id int, datetime varchar(25) primary key, discipline varchar(25), \
												  lection int, lector int, seminar int, seminarist int, comments varchar(500))')
	conn.commit()
	cursor.close()
	conn.close()


def get_ids_from_database(name):
	"""
	–ü–æ–ª—É—á–µ–Ω–∏–µ id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	"""
	conn = sqlite3.connect(f'{name}.sql')
	cursor = conn.cursor()
	cursor.execute("SELECT * FROM users")
	user_ids = dict(cursor.fetchall()).keys()
	cursor.close()
	conn.close()
	return user_ids


def get_group_by_id(name, tg_id):
	"""
	–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	"""
	conn = sqlite3.connect(f'{name}.sql')
	cursor = conn.cursor()
	cursor.execute("SELECT group_name FROM users WHERE id = '%s'" % tg_id)
	group = cursor.fetchone()[0]
	cursor.close()
	conn.close()
	return group


def insert_field(name, type, args):
	"""
	–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É
	"""
	conn = sqlite3.connect(f'{name}.sql')
	cursor = conn.cursor()
	if type == 'users':
		tg_id, group = args
		cursor.execute("INSERT INTO users (id, group_name) VALUES('%s', '%s')" % (tg_id, group))
	if type == 'forms':
		tg_id, datetime, discipline, lector, lection, seminar, seminarist, comments = args
		cursor.execute("INSERT INTO forms (id, datetime, discipline, lector, lection, seminar, seminarist, comments) \
		 								VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')" % \
					   					(tg_id, datetime, discipline, lector, lection, seminar, seminarist, comments))
	conn.commit()
	cursor.close()
	conn.close()


def update_group(name, tg_id, group):
	"""
	–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	"""
	conn = sqlite3.connect(f'{name}.sql')
	cursor = conn.cursor()
	cursor.execute("UPDATE users SET group_name = '%s' WHERE id = '%s'" % (group, tg_id))
	conn.commit()
	cursor.close()
	conn.close()


def show_database(name, type):
	"""
	–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
	"""
	conn = sqlite3.connect(f'{name}.sql')
	cursor = conn.cursor()
	if type == 'users':
		cursor.execute("SELECT * FROM users")
		users_data = dict(cursor.fetchall())
		for ids, group in users_data.items():
			print(f'User {ids} group -> {group}')
	if type == 'forms':
		cursor.execute("SELECT * FROM forms")
		forms_data = cursor.fetchall()
		for ids, date, discipline, *values in forms_data:
			print(f'User {ids} date {date} discipline {discipline} -> answers: {values}')
	cursor.close()
	conn.close()


# ___________________________________–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã_________________________________________

def is_group_correct(group):
	"""
	–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã
	"""
	s = group.strip().upper()
	res = re.match(r'–ë–ú–¢[1-5]-[1-8][1-3][–ë, –ú]$', s)
	if res is None:
		return False
	else:
		return True


registration_counter = 0
def user_registration(message):
	"""
	–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≥—Ä—É–ø–ø–µ –∏ id –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ
	"""
	global registration_counter
	group = message.text.strip().upper()
	if is_group_correct(group):
		registration_counter = 0
		insert_field(name='semester_forms', type='users', args=(message.from_user.id, group))
		bot.send_message(message.chat.id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üëã")
		registration_counter = 0
	else:
		registration_counter += 1
		if registration_counter>=3:
			bot.send_message(message.chat.id, f"–ò–∑–¥–µ–≤–∞–µ—à—å—Å—è? üòï")
		bot.send_message(message.chat.id, f"–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç: –ë–ú–¢X-XX(–ë|–ú) ‚ö†Ô∏è")
		bot.register_next_step_handler(message, user_registration)



# _________________________________–ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–´–ô –≠–ö–†–ê–ù________________________________________
@bot.message_handler(commands=['start'])
def send_welcome(message):
	"""
	–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
	"""
	create_database(name='semester_forms')
	users_ids = get_ids_from_database(name='semester_forms')
	show_database(name='semester_forms', type='users')
	show_database(name='semester_forms', type='forms')

	if message.from_user.id in users_ids:
		markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
		button1 = types.KeyboardButton('üìë –°–µ–º–µ—Å—Ç—Ä–æ–≤—ã–π –æ–ø—Ä–æ—Å')
		button2 = types.KeyboardButton('‚úçÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
		markup.row(button1)
		markup.row(button2)
		bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? ü§ñ", reply_markup=markup)
		bot.register_next_step_handler(message, start)

	else:
		bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç! –ö–∞–∂–µ—Ç—Å—è –º—ã –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É! \n–§–æ—Ä–º–∞—Ç: –ë–ú–¢X-XX(–ë|–ú)")
		bot.register_next_step_handler(message, user_registration)


def start(message):
	"""
	–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º —ç–∫—Ä–∞–Ω–µ –æ–ø—Ü–∏–∏
	–°–µ–º–µ—Å—Ç—Ä–æ–≤—ã–π –æ–ø—Ä–æ—Å - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤
	–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ
	"""

# _______________________________–°–ï–ú–ï–°–¢–†–û–í–´–ï –§–û–†–ú–´_____________________________________
	disciplines = ''

	def semester_form(message):
		"""
		–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –≤–æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –∏ –ø—Ä–∏–µ–º –æ—Ç–≤–µ—Ç–æ–≤
		"""
		if message.text == '/return':
			bot.send_message(message.chat.id, "–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω üîö", reply_markup=types.ReplyKeyboardRemove())
			back_to_info(message)
			return 0

		nonlocal disciplines

		if message.text not in disciplines:
			bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ üôÉÔ∏è")
			choose_semester_form(message)
			return 0

		requirement = ''
		current_user_discipline = message.text
		user_id = message.from_user.id
		date = datetime.datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
		arguments = [user_id, date, current_user_discipline]
		def ask(message):
			"""
			–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç
			–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç requirement –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–ª–µ–µ
			"""
			question = bot.send_message(message.chat.id, quest['text'])
			nonlocal requirement
			requirement = quest["requirements"]
			bot.register_next_step_handler(question, read_answer)

		def read_answer(answer):
			"""
			–§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π requirement
			–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –ø–æ —Ñ–æ—Ä–º–µ, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É,
			–µ—Å–ª–∏ –Ω–µ—Ç - –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
			"""
			if answer.text == '/return':
				bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚ö†Ô∏è")
				back_to_info(answer)
				return 0

			nonlocal quest
			try:
				if is_correct(answer, requirement):
					print(f"{quest['text']} correct answer text -> {answer.text} from {answer.from_user.first_name}")
					quest = next(questions)
					arguments.append(answer.text)
					ask(answer)
				else:
					print(f"{quest['text']} incorrect answer text -> {answer.text} from {answer.from_user.first_name}")
					wrong_input(answer, requirement)
					ask(answer)
			except StopIteration:
				arguments.append(answer.text)
				insert_field('semester_forms', type='forms', args=tuple(arguments))
				bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! üôè")
				bot.send_message(465825972, f"üí¨ *New Completed Form* for group: {get_group_by_id(name='semester_forms', tg_id=message.from_user.id)}", parse_mode='markdown')
				bot.send_message(message.chat.id, "–ü—Ä–æ–¥–æ–ª–∂–∏–º? /return –¥–ª—è –æ—Ç–º–µ–Ω—ã")
				choose_semester_form(message)

		questions = (q for q in form_data.values())
		quest = next(questions)
		ask(message)

	def choose_semester_form(message):
		'''
		–í—ã–≤–æ–¥–∏—Ç –∫–Ω–æ–ø–∫–∏ —Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		–î–∞–ª–µ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ semester_form(), –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –µ—Å—Ç—å –≤ –±–∞–∑–µ
		'''
		nonlocal disciplines
		group = get_group_by_id(name='semester_forms', tg_id=message.from_user.id)
		try:
			disciplines = disciplines_data[group]
			markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
			for i, discipline in enumerate(disciplines):
				button = types.KeyboardButton(discipline)
				markup.row(button)
			bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç!", reply_markup=markup)
			bot.register_next_step_handler(message, semester_form)
		except KeyError:
			bot.send_message(message.chat.id, "–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö! ‚òπÔ∏è")
			bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ /edit –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∑–∞ –ø–æ–º–æ—â—å—é /help ")

# _____________________________________FEEDBACK_____________________________________

	def read_feedback(message):
		"""
		–§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
		"""

		if message.content_type == 'text':
			date = datetime.datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
			with open("feedback.txt", "a", encoding='UTF-8') as file:
				file.write(f'From {message.from_user.first_name} {message.from_user.last_name} at {date}: {message.text}\n')
			bot.send_message(465825972, f"üí¨ *New Feedback*: {message.text}", parse_mode='markdown')
			bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! üôè")
		else:
			bot.send_message(message.chat.id, "–°–ª–æ–≤–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôÉ")
			bot.send_message(message.chat.id, "–í–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: ")
			bot.register_next_step_handler(message, read_feedback)

# ______________________–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º —ç–∫—Ä–∞–Ω–µ___________________________

	if message.text == 'üìë –°–µ–º–µ—Å—Ç—Ä–æ–≤—ã–π –æ–ø—Ä–æ—Å':
		choose_semester_form(message)

	elif message.text == '‚úçÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
		bot.send_message(message.chat.id, "–í–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: Ô∏è")
		bot.register_next_step_handler(message, read_feedback)


	elif message.text == '/help':
		help(message)

	elif message.text == '/info':
		info(message)

	elif message.text == '/edit':
		edit(message)
# _____________________________________–ü–†–û–í–ï–†–ö–ò___________________________________________
	def is_correct(message, requirement):
		"""
		–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å—Ç—Ä–æ–∫—É,
		–∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞, —Å–æ–ª–≥–∞–ª—Å–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π requirement
		"""
		if message.content_type == 'text':
			text = message.text
			if requirement == 'scale':
				if text.isdigit():
					x = int(text)
					if (x >= 1) and (x <= 10):
						return True
					else:
						return False
				return False

			if requirement == 'string':
				return True
		else:
			return False

	def wrong_input(message, requirement):
		"""
		–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
		–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏—Ç –ø–æ—è—Å–Ω–µ–Ω–∏—è, –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º –æ—Ç–≤–µ—Ç
		"""
		if message.content_type == 'text':
			if requirement == 'scale':
				bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 üî¢')
			if requirement == 'string':
				bot.send_message(message.chat.id, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã –∏ —á–∏—Å–ª–∞! üî°')
		else:
			bot.send_message(message.chat.id, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã –∏ —á–∏—Å–ª–∞! üî°')


# _____________________________________INFO, HELP, EDIT, RETURN___________________________________________

@bot.message_handler(commands=['info'])
def info(message):
	bot.send_message(message.chat.id,
'''–ü—Ä–∏–≤–µ—Ç! –Ø –ë–æ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ *–§–∞–∫—É–ª—å—Ç–µ—Ç–∞ –ë–ú–¢* üß¨
–Ø –∏—Å–ø–æ–ª—å–∑—É—é —Å–µ–º–µ—Å—Ç—Ä–æ–≤—ã–µ —Ñ–æ—Ä–º—ã –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
*–°–µ–º–µ—Å—Ç—Ä–æ–≤–∞—è —Ñ–æ—Ä–º–∞* - –∞–Ω–∫–µ—Ç–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –æ–¥–Ω–æ–π –∏–∑ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞.
*–û–±—Ä–∞—â–µ–Ω–∏–µ* - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã—Å–∫–∞–∑–∞—Ç—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É.
–í—Å–µ –æ—Ç–≤–µ—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ *–æ–±–µ–∑–ª–∏—á–µ–Ω–Ω–æ–º –≤–∏–¥–µ*. –Ø —Å—Ç–æ—Ä–æ–Ω–Ω–∏–∫ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏!
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π.''',
				parse_mode='markdown')


@bot.message_handler(commands=['help'])
def help(message):
	markup = types.InlineKeyboardMarkup()
	button1 = types.InlineKeyboardButton('üôã‚Äç‚ôÇÔ∏è –ú–∞—Ç–≤–µ–π –ú–æ–≥–∏–ª–µ–≤', url="https://t.me/Avowed721")
	markup.row(button1)
	bot.send_message(message.chat.id, "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–∏—à–∏—Ç–µ! üëá", reply_markup=markup)



@bot.message_handler(commands=['return'])
def back_to_info(message):
	commands(message)


@bot.message_handler(commands=['edit'])
def edit(message):
	markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
	button1 = types.KeyboardButton('–î–∞')
	button2 = types.KeyboardButton('–ù–µ—Ç')
	button3 = types.KeyboardButton('–ê –∫–∞–∫–∞—è —É –º–µ–Ω—è –≥—Ä—É–ø–ø–∞? üëâüëà')
	markup.row(button1, button2)
	markup.row(button3)
	bot.send_message(message.chat.id, f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É?", reply_markup=markup)
	bot.register_next_step_handler(message, group_edit)


# ___________________________________–ò–ó–ú–ï–ù–ï–ù–ò–ï –ì–†–£–ü–ü–´_______________________________________
def group_edit(message):
	if message.text == '–ù–µ—Ç':
		bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ!")
	elif message.text == '–ê –∫–∞–∫–∞—è —É –º–µ–Ω—è –≥—Ä—É–ø–ø–∞? üëâüëà':
		bot.send_message(message.chat.id, "–¢–∞–∫ —Ç–∞–∫ —Ç–∞–∫...")
		user_group = get_group_by_id(name='semester_forms', tg_id=message.from_user.id)
		bot.send_message(message.chat.id, f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {user_group.strip().upper()}")
	elif message.text == '–î–∞':
		bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É:")
		bot.register_next_step_handler(message, group_edit_2)

	else:
		bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ üôÉÔ∏è")
		edit(message)


def group_edit_2(message):
	global registration_counter
	group = message.text.strip().upper()
	if is_group_correct(group):
		update_group(name='semester_forms', tg_id=message.from_user.id, group=group )
		bot.send_message(message.chat.id, f"–ì–æ—Ç–æ–≤–æ! \n–¢–µ–ø–µ—Ä—å –í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {group}")
		registration_counter = 0
	else:
		registration_counter += 1
		if registration_counter >= 3:
			bot.send_message(message.chat.id, f"–ò–∑–¥–µ–≤–∞–µ—à—å—Å—è? üòï")
		bot.send_message(message.chat.id, f"–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç: –ë–ú–¢X-XX(–ë|–ú) ‚ö†Ô∏è")
		bot.register_next_step_handler(message, group_edit_2)


# ___________________________________–ú–ï–ù–Æ –° –ö–û–ú–ê–ù–î–ê–ú–ò_______________________________________

@bot.message_handler(content_types=['text'])
def commands(message):
	bot.send_message(message.chat.id,
f''' /start - –Ω–∞—á–∞—Ç—å
/info - –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/return - –≤—ã–π—Ç–∏ –∏–∑ –æ–ø—Ä–æ—Å–∞
/help - –ø–æ–º–æ—â—å 
/edit - –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É''',
				parse_mode='markdown')


bot.infinity_polling()