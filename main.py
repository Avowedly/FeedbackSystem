import telebot
from telebot import types
import json
import sqlite3
from dataclasses import dataclass, field
from contextlib import closing
import datetime as dt
import pandas as pd

with open("token.txt", 'r') as file:
    token = file.readline()

with open("form.json", 'r', encoding="UTF-8") as file:
    form_data = json.load(file)

with open("disciplines.json", 'r', encoding="UTF-8") as file:
    disciplines_data = json.load(file)

bot = telebot.TeleBot(token)

admin_ids = [465825972]
database_name = 'feedback.sql'
teachers_data = 'teachers.xlsx'

groups = disciplines_data.keys()
incorrect_input_cnt = 0

dates = {'semester1': {'term1': ('01.11', '07.12'), 'term2': ('01.01', '07.02')},
         'semester2': {'term1': ('01.04', '07.05'), 'term2': ('01.06', '07.07')}}

@dataclass
class User:
    user_id: int
    group: str = None
    degree: str = None
    department: str = None
    semester: str = None

    def registration(self, message):
        if message.text in ["‚è™ –ù–∞ –≥–ª–∞–≤–Ω—É—é", "/menu", "‚Ü©Ô∏è –ù–∞–∑–∞–¥"]:
            message.text = '/start'
            send_welcome(message)
        elif message.text in ['–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞']:
            self.degree = message.text
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            if self.degree == '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç':
                markup.row(types.KeyboardButton('–ë–ú–¢1'), types.KeyboardButton('–ë–ú–¢2'))
            elif self.degree == '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞':
                markup.row(types.KeyboardButton('–ë–ú–¢1'), types.KeyboardButton('–ë–ú–¢2'))
                markup.row(types.KeyboardButton('–ë–ú–¢3'), types.KeyboardButton('–ë–ú–¢4'))
                markup.row(types.KeyboardButton('–ë–ú–¢5'))
            markup.row(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), types.KeyboardButton("‚è™ –ù–∞ –≥–ª–∞–≤–Ω—É—é"))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ñ–µ–¥—Ä—É", reply_markup=markup)
            bot.register_next_step_handler(message, self.choose_department)
        else:
            incorrect_input(message=message, next_step_func=self.registration)

    def choose_department(self, message):
        if message.text in ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]:
            message.text = '‚úÖ –î–∞'
            database.group_edit(message)
        elif message.text in ["‚è™ –ù–∞ –≥–ª–∞–≤–Ω—É—é", "/menu"]:
            message.text = '/start'
            send_welcome(message)
        elif message.text in ['–ë–ú–¢1', '–ë–ú–¢2', '–ë–ú–¢3', '–ë–ú–¢4', '–ë–ú–¢5']:
            self.department = message.text
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

            n = 9 if self.degree[0] == '–ë' else 5
            for i in range(1, n, 2):
                markup.row(types.KeyboardButton(f'–°–µ–º–µ—Å—Ç—Ä {i}'), types.KeyboardButton(f'–°–µ–º–µ—Å—Ç—Ä {i + 1}'))
            markup.row(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), types.KeyboardButton("‚è™ –ù–∞ –≥–ª–∞–≤–Ω—É—é"))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ—Å—Ç—Ä", reply_markup=markup)
            bot.register_next_step_handler(message, self.choose_semester)
        else:
            incorrect_input(message=message, next_step_func=self.choose_department)

    def choose_semester(self, message):
        if message.text in ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]:
            message.text = self.degree
            self.registration(message)
        elif message.text in ["‚è™ –ù–∞ –≥–ª–∞–≤–Ω—É—é", "/menu"]:
            message.text = '/start'
            send_welcome(message)
        elif message.text in ['–°–µ–º–µ—Å—Ç—Ä 1', '–°–µ–º–µ—Å—Ç—Ä 2', '–°–µ–º–µ—Å—Ç—Ä 3', '–°–µ–º–µ—Å—Ç—Ä 4',
                        '–°–µ–º–µ—Å—Ç—Ä 5', '–°–µ–º–µ—Å—Ç—Ä 6', '–°–µ–º–µ—Å—Ç—Ä 7', '–°–µ–º–µ—Å—Ç—Ä 8']:
            self.semester = message.text
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

            local_groups = [group for group in groups if
                            (group[-1] == self.degree[0]) and
                            (group[3] == self.department[-1]) and
                            (group[5] == self.semester[-1])]

            for group in local_groups:
                markup.row(types.KeyboardButton(group))
            markup.row(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), types.KeyboardButton("‚è™ –ù–∞ –≥–ª–∞–≤–Ω—É—é"))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É", reply_markup=markup)
            bot.register_next_step_handler(message, self.choose_group)
        else:
            incorrect_input(message=message, next_step_func=self.choose_semester)

    def choose_group(self, message):
        if message.text in ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]:
            message.text = self.department
            self.choose_department(message)
        elif message.text in ["‚è™ –ù–∞ –≥–ª–∞–≤–Ω—É—é", "/menu"]:
            message.text = '/start'
            send_welcome(message)
        elif message.text in groups:
            self.group = message.text
            if message.from_user.id in database.get_ids():
                self.update_group()
                bot.send_message(message.chat.id, f"–ì–æ—Ç–æ–≤–æ! \n–¢–µ–ø–µ—Ä—å –í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {self.group}")
                message.text = '/start'
                send_welcome(message)
            else:
                self.insert_group()
                bot.send_message(message.chat.id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üëã\n–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ")
        else:
            incorrect_input(message=message, next_step_func=self.choose_department)

    def insert_group(self):
        connection = sqlite3.connect(database_name)
        with closing(connection.cursor()) as cursor:

            sql_script = "INSERT INTO users (user_id, group_name) VALUES(?, ?)"

            data_tuple = (self.user_id, self.group)
            cursor.execute(sql_script, data_tuple)
            connection.commit()
        connection.close()

    def update_group(self):
        connection = sqlite3.connect(database_name)
        with closing(connection.cursor()) as cursor:

            sql_script = "UPDATE users SET group_name = ? WHERE user_id = ?"

            data_tuple = (self.group, self.user_id)
            cursor.execute(sql_script, data_tuple)
            connection.commit()
        connection.close()


@dataclass
class Database:
    @staticmethod
    def create():
        connection = sqlite3.connect(database_name)
        with closing(connection.cursor()) as cursor:
            users = '''CREATE TABLE IF NOT EXISTS users 
            (
                user_id int primary key, 
                group_name varchar(10)
            )'''

            feedback = '''CREATE TABLE IF NOT EXISTS feedback 
            (
                id INTEGER PRIMARY KEY, 
                user_id int, 
                datetime varchar(25), 
                feedback varchar(500)
            )
            '''

            forms = '''CREATE TABLE IF NOT EXISTS forms 
            (
                user_id int, 
                datetime varchar(25), 
                discipline varchar(25), 
                lec int, 
                lecm int, 
                sem int, 
                semm int, 
                lab int, 
                labm int, 
                proj int,
                projm int,
                comments varchar(500),
                PRIMARY KEY (user_id, datetime)
            )
            '''

            teachers = pd.read_excel(teachers_data)
            teachers.to_sql('teachers', connection, index=False, if_exists="replace")

            cursor.execute(users)
            cursor.execute(forms)
            cursor.execute(feedback)
            connection.commit()
        connection.close()

    @staticmethod
    def get_ids():
        connection = sqlite3.connect(database_name)
        with closing(connection.cursor()) as cursor:
            cursor.execute("SELECT user_id FROM users")
            users_ids = cursor.fetchall()
            users_ids = [i[0] for i in users_ids]
        connection.close()
        return users_ids

    def get_group_by_id(self, user_id):
        connection = sqlite3.connect(database_name)
        with closing(connection.cursor()) as cursor:

            sql_script = "SELECT group_name FROM users WHERE user_id = ?"

            data_tuple = (user_id, )
            cursor.execute(sql_script, data_tuple)
            group = cursor.fetchone()[0]
        connection.close()
        return group

    def group_edit(self, message):
        if message.text == '‚ùå –ù–µ—Ç':
            bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ!")
            message.text = '/start'
            send_welcome(message)
        elif message.text == '‚úÖ –î–∞':
            user = User(user_id=message.from_user.id)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç")
            button2 = types.KeyboardButton("–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞")
            markup.row(button1)
            markup.row(button2)
            markup.row(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), types.KeyboardButton("‚è™ –ù–∞ –≥–ª–∞–≤–Ω—É—é"))
            bot.send_message(message.chat.id, "–ì–¥–µ –í—ã –æ–±—É—á–∞–µ—Ç–µ—Å—å?", reply_markup=markup)
            bot.register_next_step_handler(message, user.registration)
        else:
            incorrect_input(message=message, next_step_func=self.group_edit)

    def delete_forms(self, user_id):
        connection = sqlite3.connect(database_name)
        with closing(connection.cursor()) as cursor:

            sql_script = "DELETE from forms where user_id = ?"

            data_tuple = (user_id, )
            cursor.execute(sql_script, data_tuple)
            connection.commit()
        connection.close()


@dataclass
class Feedback:
    user_id: int
    datetime: str = None
    feedback: str = None

    def add_feedback(self):
        connection = sqlite3.connect(database_name)
        with closing(connection.cursor()) as cursor:

            sql_script = "INSERT INTO feedback (user_id, datetime, feedback) VALUES(?, ?, ?)"

            data_tuple = (self.user_id, self.datetime, self.feedback)
            cursor.execute(sql_script, data_tuple)
            connection.commit()
        connection.close()

    def read_feedback(self, message):
        if message.text in ["‚è™ –ù–∞ –≥–ª–∞–≤–Ω—É—é", "/menu", "‚Ü©Ô∏è –ù–∞–∑–∞–¥"]:
            message.text = '/start'
            send_welcome(message)
        elif message.content_type == 'text':
            self.datetime = dt.datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            self.feedback = message.text
            self.add_feedback()
            bot.send_message(465825972, f"üí¨ *New Feedback*: {message.text}", parse_mode='markdown')
            bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! üôè")
            bot.send_message(message.chat.id, "/start, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ")
        else:
            bot.send_message(message.chat.id, "–°–ª–æ–≤–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üôÉ")
            bot.send_message(message.chat.id, "–í–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: ")
            bot.register_next_step_handler(message, self.read_feedback)


@dataclass
class SemesterForm:
    user_id: int
    datetime: str = None
    discipline: str = None
    term: str = None

    counter: int = 0
    questions: list = field(default_factory=list)

    rates: list = field(default_factory=list)
    empty_disciplines: list = field(default_factory=list)

    def add_filled_form(self):
        connection = sqlite3.connect(database_name)
        with closing(connection.cursor()) as cursor:
            sql_script = """INSERT INTO forms 
        (
            user_id, 
            datetime, 
            discipline, 
            lec, 
            lecm, 
            sem, 
            semm, 
            lab, 
            labm, 
            proj, 
            projm, 
            comments
        ) 
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """
            data_tuple = (self.user_id, self.datetime, self.discipline) + tuple(self.rates)
            cursor.execute(sql_script, data_tuple)
            connection.commit()
        connection.close()

    def get_filled_disciplines(self):
        connection = sqlite3.connect(database_name)
        with closing(connection.cursor()) as cursor:

            sql_script = "SELECT discipline FROM forms WHERE user_id = ?"

            data_tuple = (self.user_id, )
            cursor.execute(sql_script, data_tuple)
            data = cursor.fetchall()
            filled_disciplines = [i[0] for i in data]
        connection.close()
        return set(filled_disciplines)

    @staticmethod
    def list_of_teachers(discipline, semester):
        connection = sqlite3.connect(database_name)
        with closing(connection.cursor()) as cursor:
            sql_script = "SELECT * FROM teachers WHERE –ü—Ä–µ–¥–º–µ—Ç = ? AND –°–µ–º–µ—Å—Ç—Ä = ?"
            data_tuple = (discipline, semester)
            cursor.execute(sql_script, data_tuple)
            teachers = cursor.fetchone()
        connection.close()

        if teachers is None:
            return None
        else:
            doubled_teachers = [[t, t] for t in teachers[3:]]      # –£–¥–≤–æ–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ –∑–∞–Ω—è—Ç–∏–π (—Ç.–∫. 2 –æ—Ü–µ–Ω–∫–∏ –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–∏–ø)
            flat_teachers = [item for sublist in doubled_teachers for item in sublist] # –†–∞–∑–≤–µ—Ä—Ç–∫–∞ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
            flat_teachers.append("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")                                       # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            return flat_teachers

    def end_of_form(self, message):
        self.add_filled_form()
        self.rates = [None, None, None, None, None, None, None, None, None]
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! üôè")
        bot.send_message(465825972,
                         f"üí¨ *New Completed Form* for group: {database.get_group_by_id(user_id=message.from_user.id)}",
                         parse_mode='markdown')
        message.text = self.term
        self.choose_semester_form(message)

    @staticmethod
    def pairwise(iterable):
        "s -> (s0, s1), (s2, s3), (s4, s5), ..."
        a = iter(iterable)
        return zip(a, a)


    def choose_semester_form(self, message):
        group = database.get_group_by_id(user_id=message.from_user.id)

        # current_date = dt.datetime.now()
        # print(current_date)
        # semester = 'semester1' if int(group[5]) % 2 == 1 else 'semester2'
        # term = ''
        #
        # date_bounds = dates[semester]
        #
        # for key, value in date_bounds.items():
        #     for d in value:
        #         term_time = dt.datetime.strptime(d, '%d.%m')
        #         print(term_time, current_date, term_time.day > current_date.day and term_time.month > current_date.month)

        disciplines = set(disciplines_data[group]['term 2'])  #FIXME –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–∞ term –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        filled_disciplines = self.get_filled_disciplines()
        self.empty_disciplines = list(disciplines.difference(filled_disciplines))
        num_of_empty_disciplines = len(self.empty_disciplines)

        if num_of_empty_disciplines == 0:
            bot.send_message(message.chat.id,
                             "–ü–æ—Ö–æ–∂–µ –í—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º! üéâ")
            message.text = '/start'
            send_welcome(message)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for d1, d2 in self.pairwise(self.empty_disciplines):
                markup.row(types.KeyboardButton(d1), types.KeyboardButton(d2))
            if num_of_empty_disciplines%2 == 1:
                markup.row(types.KeyboardButton(self.empty_disciplines[-1]))
            markup.row(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), types.KeyboardButton("‚è™ –ù–∞ –≥–ª–∞–≤–Ω—É—é"))

            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç!", reply_markup=markup)
            bot.register_next_step_handler(message, self.semester_form)

    def semester_form(self, message):
        if message.text in ["‚è™ –ù–∞ –≥–ª–∞–≤–Ω—É—é", "/menu", "‚Ü©Ô∏è –ù–∞–∑–∞–¥"]:
            message.text = '/start'
            send_welcome(message)

        elif message.text in self.empty_disciplines:

            self.datetime = dt.datetime.fromtimestamp(message.date).strftime('%Y-%m-%d %H:%M:%S')
            self.discipline = message.text

            group = database.get_group_by_id(user_id=message.from_user.id)
            teachers = self.list_of_teachers(discipline=self.discipline, semester=group[5])   # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–µ–º–µ—Å—Ç—Ä—É –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ

            if teachers is None:
                bot.send_message(message.chat.id,
                                 "Ooops, –∫–∞–∂–µ—Ç—Å—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ! ‚òπÔ∏è \n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç")
                bot.send_message(465825972,
                                 f"‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ *{message.text}* —É –≥—Ä—É–ø–ø—ã *{group}*",
                                 parse_mode='markdown')
                bot.register_next_step_handler(message, self.semester_form)
            else:
                for i, q in enumerate(form_data.keys()):
                    form_data[q]['teacher'] = teachers[i]

                self.questions = list(form_data.values())
                self.rates = [None, None, None, None, None, None, None, None, None]
                self.counter = 0
                self.ask(message)
        else:
            incorrect_input(message=message, next_step_func=self.semester_form)

    def ask(self, message):
        question = self.questions[self.counter]
        if question['teacher'] is not None:
            if question['type'] == 'scale':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for i in range(1, 11, 2):
                    markup.row(types.KeyboardButton(str(i)), types.KeyboardButton(str(i+1)))
                markup.row(types.KeyboardButton("‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ"), types.KeyboardButton("‚è™ –ù–∞ –≥–ª–∞–≤–Ω—É—é"))
                bot.send_message(message.chat.id, question['text'] + f'\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {question["teacher"]}', reply_markup=markup)

            elif question['type'] == 'text':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.row(types.KeyboardButton("‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ"), types.KeyboardButton("‚è™ –ù–∞ –≥–ª–∞–≤–Ω—É—é"))
                bot.send_message(message.chat.id, question['text'], reply_markup=markup)
            bot.register_next_step_handler(message, self.read_answer)
        else:
            self.rates[self.counter: self.counter + 2] = None, None
            self.counter += 2
            if self.counter < 9:
                self.ask(message)
            else:
                self.end_of_form(message)

    def read_answer(self, message):
        question = self.questions[self.counter]
        if message.text == "‚¨ÖÔ∏è –í –Ω–∞—á–∞–ª–æ":
            self.counter = 0
            self.ask(message)

        elif message.text in ["‚è™ –ù–∞ –≥–ª–∞–≤–Ω—É—é", "/menu"]:
            message.text = '/start'
            send_welcome(message)
        elif message.content_type == 'text' and (question['type'] == 'text' or
                                                 question['type'] == 'scale' and
                                                 message.text in [str(i) for i in range(1, 11)]):
            self.rates[self.counter] = message.text
            self.counter += 1
            if self.counter < 9:
                self.ask(message)
            else:
                self.end_of_form(message)

        else:
            incorrect_input(message=message, next_step_func=self.read_answer)


def incorrect_input(message, next_step_func):
    global incorrect_input_cnt
    if incorrect_input_cnt >= 3:
        incorrect_input_cnt = 0
        commands(message)
    else:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ /menu üôÉÔ∏è")
        bot.register_next_step_handler(message, next_step_func)
        incorrect_input_cnt += 1


database = Database()
# _________________________________–ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–´–ô –≠–ö–†–ê–ù________________________________________

@bot.message_handler(commands=['start'])
def send_welcome(message):
    database.create()
    users_ids = database.get_ids()

    global incorrect_input_cnt
    incorrect_input_cnt = 0
    user = User(user_id=message.from_user.id)

    if message.from_user.id in users_ids:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton('üìë –û–ø—Ä–æ—Å –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º')
        button2 = types.KeyboardButton('‚úçÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
        button3 = types.KeyboardButton('üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É')
        markup.row(button1)
        markup.row(button2)
        markup.row(button3)
        if message.from_user.id in admin_ids:
            markup.row(types.KeyboardButton('üíΩ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'))
            markup.row(types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –º–æ–∏ —Ñ–æ—Ä–º—ã'))
        bot.send_message(message.chat.id, f"–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üíÅüèª", reply_markup=markup)
        bot.register_next_step_handler(message, start)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç")
        button2 = types.KeyboardButton("–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞")
        markup.row(button1, button2)
        markup.row(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), types.KeyboardButton("‚è™ –ù–∞ –≥–ª–∞–≤–Ω—É—é"))
        bot.send_message(message.chat.id,
                         "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∂–µ—Ç—Å—è –º—ã –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã. \n–ì–¥–µ –í—ã –æ–±—É—á–∞–µ—Ç–µ—Å—å?",
                         reply_markup=markup)
        bot.register_next_step_handler(message, user.registration)


def start(message):
    if message.text == 'üìë –û–ø—Ä–æ—Å –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º':
        form = SemesterForm(user_id=message.from_user.id)
        form.choose_semester_form(message)

    elif message.text == '‚úçÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"), types.KeyboardButton("‚è™ –ù–∞ –≥–ª–∞–≤–Ω—É—é"))
        bot.send_message(message.chat.id, "–í–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: Ô∏è", reply_markup=markup)
        feedback = Feedback(user_id=message.from_user.id)
        bot.register_next_step_handler(message, feedback.read_feedback)

    elif message.text == 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("‚úÖ –î–∞")
        button2 = types.KeyboardButton("‚ùå –ù–µ—Ç")
        markup.row(button1, button2)
        bot.send_message(message.chat.id,
                         f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: *{database.get_group_by_id(user_id=message.from_user.id)}*",
                         reply_markup=markup,
                         parse_mode='markdown')
        bot.send_message(message.chat.id, f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É?")
        bot.register_next_step_handler(message, database.group_edit)

    elif message.text == 'üíΩ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö' and message.from_user.id in admin_ids:
        with open('feedback.sql', 'rb') as doc:
            bot.send_document(chat_id=message.from_user.id, document=doc)

    elif message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –º–æ–∏ —Ñ–æ—Ä–º—ã' and message.from_user.id in admin_ids:
        database.delete_forms(user_id=message.from_user.id)

    elif message.text == '/help':
        help(message)

    elif message.text == '/start':
        send_welcome(message)

    elif message.text == '/info':
        info(message)

    else:
        incorrect_input(message=message, next_step_func=start)


# _____________________________________COMMANDS___________________________________________

@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id,
                     ('–ü—Ä–∏–≤–µ—Ç! –Ø –ë–æ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ *–§–∞–∫—É–ª—å—Ç–µ—Ç–∞ –ë–ú–¢* üß¨\n'
                      '–Ø –∏—Å–ø–æ–ª—å–∑—É—é —Å–µ–º–µ—Å—Ç—Ä–æ–≤—ã–µ —Ñ–æ—Ä–º—ã –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–±–∏—Ä–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n'
                      '*–°–µ–º–µ—Å—Ç—Ä–æ–≤–∞—è —Ñ–æ—Ä–º–∞* - –∞–Ω–∫–µ—Ç–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –æ–¥–Ω–æ–π –∏–∑ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞.\n'
                      '*–û–±—Ä–∞—â–µ–Ω–∏–µ* - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã—Å–∫–∞–∑–∞—Ç—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É.\n'
                      '–í—Å–µ –æ—Ç–≤–µ—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ *–æ–±–µ–∑–ª–∏—á–µ–Ω–Ω–æ–º –≤–∏–¥–µ*.\n'
                      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π.'),
                     parse_mode='markdown', reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(commands=['help'])
def help(message):
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton('üôã‚Äç‚ôÇÔ∏è –ú–∞—Ç–≤–µ–π –ú–æ–≥–∏–ª–µ–≤', url="https://t.me/Avowed721")
    markup.row(button1)
    bot.send_message(message.chat.id, "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–∏—à–∏—Ç–µ! üëá", reply_markup=markup)


@bot.message_handler(commands=['return'])
def back_to_commands(message):
    commands(message)


@bot.message_handler(content_types=['text'])
def commands(message):
    bot.send_message(message.chat.id,
                     (f' /start - –ù–∞—á–∞—Ç—å\n'
                      f'/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n'
                      f'/info - –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n'
                      f'/help - –ü–æ–º–æ—â—å \n'),
                     parse_mode='markdown', reply_markup=types.ReplyKeyboardRemove())


bot.infinity_polling()
